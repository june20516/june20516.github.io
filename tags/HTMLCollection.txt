1:HL["/_next/static/css/9674fbd74573baf2.css",{"as":"style"}]
0:[[["",{"children":["tags",{"children":[["tag","HTMLCollection","d"],{"children":["__PAGE__?{\"tag\":\"HTMLCollection\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9674fbd74573baf2.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"6698","chunks":["771:static/chunks/771-1fb5f02affb54e80.js","274:static/chunks/274-31a5843dc341abd2.js","964:static/chunks/964-3fbb84800944960d.js","925:static/chunks/925-98b9640d621f887a.js","222:static/chunks/222-8be30348cbe4dffe.js","185:static/chunks/app/layout-bf724705ac814d31.js"],"name":"","async":false}
5:I{"id":"4463","chunks":["272:static/chunks/webpack-315f2c03e4148e38.js","667:static/chunks/2443530c-b37977cb0d35fe50.js","488:static/chunks/488-754b8491efac4835.js"],"name":"","async":false}
6:I{"id":"1010","chunks":["272:static/chunks/webpack-315f2c03e4148e38.js","667:static/chunks/2443530c-b37977cb0d35fe50.js","488:static/chunks/488-754b8491efac4835.js"],"name":"","async":false}
7:I{"id":"5568","chunks":["771:static/chunks/771-1fb5f02affb54e80.js","274:static/chunks/274-31a5843dc341abd2.js","640:static/chunks/640-f098f3490fe84b2a.js","605:static/chunks/app/tags/[tag]/page-3406bbdc92c9f8f0.js"],"name":"","async":false}
8:I{"id":"6640","chunks":["771:static/chunks/771-1fb5f02affb54e80.js","274:static/chunks/274-31a5843dc341abd2.js","640:static/chunks/640-f098f3490fe84b2a.js","605:static/chunks/app/tags/[tag]/page-3406bbdc92c9f8f0.js"],"name":"","async":false}
2:[["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children",["tag","HTMLCollection","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[[["$","$L7",null,{"tag":"HTMLCollection","count":1}],["$","ol",null,{"children":[["$","$L8","0",{"post":{"slug":"trap-of-htmlcollection","meta":{"title":"HTMLCollection의 함정","description":"클래스를 기준으로 스크립트를 작성하다가 맞닥트린 예상치 못한 문제","date":"2021/09/07","tags":["HTMLCollection","getElementsByClassName","nodeList","querySelectorAll()"],"categories":["dev","web"],"thumbnail":"assets/images/posts/trap-of-htmlcollection.jpeg"},"content":"\n```html\n<div class=\"wrapper lunchtime-template\">\n  <p class=\"title\">\n    <span class=\"text-primary name-slot\">OOO</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n  </ul>\n</div>\n```\n\n위와 같은 형태의 HTML 템플릿에 데이터를 넣는 작업이었다. 스크립트를 작성하면서, 먼저 알맞은 태그 요소를 찾아 데이터를 넣고, 템플릿으로 활용했던 클래스 이름들을 제거하려고 했다.\n\n```javascript\nconst data = {\n  bran: ['철판 볶음밥을 먹었다', '커피를 주문했다', '쿠키도 구매했다', '양치를 했다'],\n};\n\nlet lunchTimeDiv = document.querySelector('.lunchtime-template').cloneNode(true);\nlunchTimeDiv.classList.remove('lunchtime-template');\n\nlet name = Object.keys(data)[0];\nlet nameSlot = lunchTimeDiv.querySelector('.name-slot');\nnameSlot.innerHTML = name;\nnameSlot.classList.remove('name-slot');\n```\n\n여기까지는 별 문제 없었지만, 이후에 문제가 발생했다.\n\n```javascript\nconst histories = data[name];\nlet historySlots = lunchTimeDiv.getElementsByClassName('history-slot');\nfor (let idx = 0; idx < historySlots.length; idx++) {\n  slot = historySlots[idx];\n  slot.innerText = histories[idx];\n  slot.classList.remove('history-slot');\n}\n```\n\n스크립트로 처리된 결과는 기대와 달랐다.\n\n```html\n<div class=\"wrapper\">\n  <p class=\"title\">\n    <span class=\"text-primary\">bran</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info\">커피를 주문했다</li>\n    <li class=\"text-info history-slot\"></li>\n  </ul>\n</div>\n```\n\n코드가 기대한 대로 작동하지 않아 어리둥절했다. 간단한 코드에서 문제가 발생하리라 예상하지 못했지만, 분명히 어디선가 잘못된 부분이 있었다.\n고민 끝에, 루프 안에서 인덱스를 조절해야 했던 알고리즘 문제를 떠올리고 코드를 수정해 보았다.\n\n```javascript\nfor (let idx = 0; idx < histories.length; idx++) {\n  slot = historySlots[idx];\n  slot.innerText = histories[idx];\n  slot.classList.remove('history-slot');\n  idx -= 1;\n}\n```\n\n결과는 나왔지만, 뭔가 이상했다.\n\n```html\n<div class=\"wrapper\">\n  <p class=\"title\">\n    <span class=\"text-primary\">bran</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n  </ul>\n</div>\n```\n\n포문에서 발생한 문제는 어느 정도 해결됐지만, 데이터를 인덱스와 같이 순환해야 하므로 복잡성만 더 커졌을 뿐, 이 방식은 적절하지 않았다.\n근본적인 문제를 고민해보니, `historySlots`가 루프가 진행됨에 따라 변하고 있었다. 그래서 `historySlots`를 잡는 방식을 `getElementsByClassName`에서 `querySelectorAll`로 바꿔보기로 했다.\n\n```html\n<div class=\"wrapper lunchtime-template\">\n  <p class=\"title\">\n    <span class=\"text-primary name-slot\">OOO</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n  </ul>\n</div>\n\n<script>\n  const data = {\n    bran: ['철판 볶음밥을 먹었다', '커피를 주문했다', '쿠키도 구매했다', '양치를 했다'],\n  };\n  let lunchTimeDiv = document.querySelector('.lunchtime-template').cloneNode(true);\n  lunchTimeDiv.classList.remove('lunchtime-template');\n\n  let name = Object.keys(data)[0];\n  let nameSlot = lunchTimeDiv.querySelector('.name-slot');\n  nameSlot.innerHTML = name;\n  nameSlot.classList.remove('name-slot');\n  const histories = data[name];\n\n  // 이곳을 변경\n  let historySlots = lunchTimeDiv.querySelectorAll('.history-slot');\n\n  for (let idx = 0; idx < historySlots.length; idx++) {\n    slot = historySlots[idx];\n    slot.innerText = histories[idx];\n    slot.classList.remove('history-slot');\n  }\n</script>\n```\n\n드디어 의도대로 동작했다.\n\n```html\n<div class=\"wrapper\">\n  <p class=\"title\">\n    <span class=\"text-primary\">bran</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">커피를 주문했다</li>\n    <li class=\"text-info\">쿠키도 구매했다</li>\n    <li class=\"text-info\">양치를 했다</li>\n  </ul>\n</div>\n```\n\n---\n\n`getElementsByClassName`은 `HTMLCollection`을 반환하고, `querySelectorAll`은 `NodeList`를 반환한다.\n\n```javascript\nlet historySlots1 = lunchTimeDiv.getElementsByClassName('history-slot');\nlet historySlots2 = lunchTimeDiv.querySelectorAll('.history-slot');\nconsole.log(historySlots1.toString()); // '[object HTMLCollection]'\nconsole.log(historySlots2.toString()); //  '[object NodeList]'\n```\n\n[HTMLCollection과 NodeList](https://dev.to/theoluyi/queryselector-vs-getelementsbyclassname-nodelist-vs-htmlcollection-30gg) 의 차이를 설명하는 좀 더 자세한 글을 첨부한다.\n\n간단하게 말하자면, HTMLCollection은 항상 현재 상황을 반영한다. 즉, 클래스 이름을 기준으로 요소들이 담기는데, 내가 클래스 이름을 지우면서 해당 컬렉션에서 제외된 것이다. 포문이 제대로 작동하지 않은 이유는 바로 이 때문이었다.\n\n더 나아가 HTMLCollection은 배열이 아닌 유사 배열이기 때문에 forEach 같은 배열 메서드를 사용할 수 없다. 하지만 객체 속성에 접근하듯이 .속성명 형식으로 접근이 가능하다. <sup>[ref](https://devsoyoung.github.io/posts/js-htmlcollection-nodelist)</sup>\n\n앞으로는 상황에 맞는 선택을 더 신중히 해야겠다.\n"},"hasThumbnail":false}]]}]],null],"segment":"__PAGE__?{\"tag\":\"HTMLCollection\"}"},"styles":[]}],"segment":["tag","HTMLCollection","d"]},"styles":[]}],"segment":"tags"},"styles":[]}],"params":{}}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
