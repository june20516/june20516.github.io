1:HL["/_next/static/css/5624dea08047460b.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":[["slug","macos-gui-app-node-path-fix","d"],{"children":["__PAGE__?{\"slug\":\"macos-gui-app-node-path-fix\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5624dea08047460b.css","precedence":"next"}]],["$L3",null]]]]
4:HL["/_next/static/css/ed65a566c9c7159d.css",{"as":"style"}]
5:I{"id":"6886","chunks":["771:static/chunks/771-4a62562d40204820.js","846:static/chunks/846-5374114718c3ba3f.js","218:static/chunks/218-24e2ed3a86df3181.js","185:static/chunks/app/layout-e8c4c155fa8e4ac6.js"],"name":"","async":false}
6:I{"id":"4463","chunks":["272:static/chunks/webpack-adfd2e3e7e928ad6.js","667:static/chunks/2443530c-0538301a504b83cf.js","488:static/chunks/488-c0b34e96c35b33f7.js"],"name":"","async":false}
7:I{"id":"1010","chunks":["272:static/chunks/webpack-adfd2e3e7e928ad6.js","667:static/chunks/2443530c-0538301a504b83cf.js","488:static/chunks/488-c0b34e96c35b33f7.js"],"name":"","async":false}
2:[["$","$L5",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["slug","macos-gui-app-node-path-fix","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"slug\":\"macos-gui-app-node-path-fix\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ed65a566c9c7159d.css","precedence":"next"}]]}],null],"segment":["slug","macos-gui-app-node-path-fix","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],"params":{}}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기 - Bran's codeverse"}],["$","meta",null,{"name":"description","content":"VS Code 익스텐션이 Node를 찾지 못할 때"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,[null,["$","meta",null,{"property":"og:title","content":"macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기 - Bran's codeverse"}],["$","meta",null,{"property":"og:description","content":"VS Code 익스텐션이 Node를 찾지 못할 때"}],null,["$","meta",null,{"property":"og:site_name","content":"Bran's codeverse"}],null,null,null,[[["$","meta",null,{"property":"og:image","content":"http://localhost:3000/assets/images/posts/thumbnails/macos-gui-app-node-path-fix.png"}]]],null,null,null,null,null,null,[["$","meta",null,{"property":"og:type","content":"article"}],null,null,null,null,null,null]],[["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:site","content":"@codeverse"}],null,null,null,["$","meta",null,{"name":"twitter:title","content":"macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기 - Bran's codeverse"}],["$","meta",null,{"name":"twitter:description","content":"VS Code 익스텐션이 Node를 찾지 못할 때"}],[[["$","meta",null,{"name":"twitter:image","content":"http://localhost:3000/assets/images/posts/thumbnails/macos-gui-app-node-path-fix.png"}]]],null,null],null,[null,[["$","link",null,{"rel":"icon","href":"/icon.svg?43070ac23468c58b","type":"image/svg+xml","sizes":"32x32"}]],[],null]]
9:I{"id":"4970","chunks":["771:static/chunks/771-4a62562d40204820.js","755:static/chunks/app/drafts/[slug]/page-8b9b2b7e809006ca.js"],"name":"","async":false}
8:["$","$L9",null,{"post":{"slug":"macos-gui-app-node-path-fix","meta":{"title":"macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기","description":"VS Code 익스텐션이 Node를 찾지 못할 때","date":"2025/01/16","tags":["macOS","nvm","Node.js","PATH","VS Code"],"categories":["dev","troubleshooting"],"thumbnail":"assets/images/posts/thumbnails/macos-gui-app-node-path-fix.png"},"content":"\n# macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기\n\n프로젝트에서 i18n Ally 익스텐션을 사용하고 있었는데, 분명히 정상 작동하던 것이 어느 날 갑자기 고장났다. 로그를 확인해보니 이런 에러가 나오고 있었다\n\n```\n🐛 Failed to load Error: Command failed: node \"/Users/bran/.windsurf/extensions/lokalise.i18n-ally-2.13.1-universal/node_modules/ts-node/dist/bin.js\" ...\n/bin/sh: node: command not found\n```\n\n터미널에서 `node --version`을 실행하면 정상적으로 `v22.18.0`이 출력되는데, VS Code나 Windsurf 같은 GUI 앱의 익스텐션에서는 Node를 찾을 수 없다는 것이다.\n\n## 문제의 원인\n\n### nvm의 동작 방식\n\nnvm은 **동적으로** PATH를 조작한다. 셸이 시작될 때 `.zshrc`나 `.bash_profile`에 있는 `nvm.sh` 스크립트가 실행되면서\n\n1. 현재 활성화된 Node 버전의 경로를 찾는다\n2. 해당 경로를 PATH **맨 앞에** 추가한다\n3. `nvm use <버전>` 명령을 실행하면 이전 경로를 제거하고 새 경로를 추가한다\n\n```bash\n# 터미널에서 확인해보면 nvm Node 경로가 PATH 맨 앞에 있다\n$ echo $PATH\n/Users/bran/.nvm/versions/node/v22.18.0/bin:/opt/homebrew/bin:...\n```\n\n### GUI 앱은 셸 설정을 읽지 않는다\n\n문제는 **macOS GUI 앱은 셸 설정 파일을 읽지 않는다**는 것이다.\n\n- Finder나 Dock에서 앱을 실행하면 `launchd`라는 시스템 데몬이 앱을 실행한다\n- `launchd`는 `/etc/paths`와 `/etc/paths.d/` 디렉토리의 설정만 읽는다\n- 사용자의 `.zshrc`나 `.bash_profile`은 완전히 무시된다\n- 따라서 nvm의 동적 PATH 설정도 적용되지 않는다\n\n터미널을 열면 셸이 시작되면서 `.zshrc`를 읽어 nvm이 로드되지만, GUI 앱은 그런 과정 없이 바로 실행되기 때문에 nvm의 Node를 찾을 수 없는 것이다.\n\n## 해결 방법\n\n`/etc/paths.d/` 디렉토리에 nvm Node 경로를 추가하면 된다. 이렇게 하면 모든 GUI 앱이 시스템 시작 시 해당 경로를 PATH에 포함한다.\n기왕 하는김에, nvm만큼 동적으로 대응할수는 없더라도 특정 버전에 의존하지는 않도록 default 버전을 바라보는 방식으로 추가했다.\n\n### 1. 현재 nvm 버전 확인\n\n```bash\nnvm current\n# v22.18.0\n```\n\n### 2. nvm default alias 설정\n\n```bash\nnvm alias default 22.18.0\n```\n\nnvm은 `default`라는 이름으로 심볼릭 링크를 생성한다\n```\n~/.nvm/versions/node/default -> ~/.nvm/versions/node/v22.18.0\n```\n\n### 3. /etc/paths.d/nvm 파일 생성\n\n```bash\necho \"$HOME/.nvm/versions/node/default/bin\" | sudo tee /etc/paths.d/nvm\n```\n\n위 명령어로 `/etc/paths.d/nvm` 파일이 생성되고, 다음 내용이 저장된다\n\n```\n/Users/bran/.nvm/versions/node/default/bin\n```\n\n여기까지 했으면 macOS 재부팅 시 적용이 될 것이다. 재부팅 하지 않고 즉시 변경사항을 반영하고 싶다면 다음 4번과 5번 단계를 추가로 거친다.\n\n### 4. Dock 재시작\n\n```bash\nkillall Dock\n```\n\n### 5. GUI 앱 재시작\n\nVS Code, Windsurf 등 Node를 사용하는 앱을 완전히 종료하고 다시 실행한다.\n\n## 작동 원리\n\n### GUI 앱에서\n\n이제 GUI 앱들은 다음과 같은 PATH를 가지게 된다\n\n```\n/usr/local/bin\n/System/Cryptexes/App/usr/bin\n/usr/bin\n/bin\n/usr/sbin\n/sbin\n/Users/bran/.nvm/versions/node/default/bin  # 새로 추가됨\n```\n\n`/etc/paths.d/` 디렉토리의 모든 파일 내용이 자동으로 PATH에 추가되는 것이다.\n\n### 터미널에서\n\n터미널에서는 여전히 nvm이 정상 작동한다\n\n1. 셸이 시작되면서 `.zshrc`의 `nvm.sh`가 실행된다\n2. nvm이 동적으로 PATH 맨 앞에 Node 경로를 추가한다\n3. `nvm use` 명령으로 프로젝트별로 다른 Node 버전을 자유롭게 사용할 수 있다\n\nnvm의 PATH가 `/etc/paths.d/nvm`보다 앞에 있기 때문에 터미널에서는 nvm이 우선순위를 가진다.\n\n### default 심볼릭 링크의 장점\n\n`default` 심볼릭 링크를 사용했기 때문에\n\n```bash\n# GUI 앱의 기본 Node 버전을 변경하고 싶다면\nnvm alias default 18.0.0\n\n# Dock 재시작\nkillall Dock\n\n# 이제 GUI 앱들은 v18.0.0을 사용한다\n```\n\n절대 경로 대신 `default` 심볼릭 링크를 사용하면 `/etc/paths.d/nvm` 파일을 수정할 필요 없이 nvm alias만 바꾸면 된다.\n\n## 결과\n\n이제 GUI로 실행하는 앱들도 node를 찾을 수 있다.\n그리고 내 IDE의 i18n Ally 익스텐션도 정상적으로 작동한다.\n\n```\n✅ Loading finished\n📂 Loading locales under /Users/bran/repositories/front-taap-stpm/src/constants/locales\n    📑 Loading (en) en.ts\n    📑 Loading (ko) ko.ts\n```\n\n## 요약\n\n- **문제**: macOS GUI 앱은 셸 설정 파일을 읽지 않아 nvm Node를 찾지 못함\n- **원인**: GUI 앱은 `launchd`가 실행하며, `/etc/paths`와 `/etc/paths.d/`만 참조함\n- **해결**: `/etc/paths.d/nvm`에 nvm default 경로를 추가\n- **효과**:\n  - GUI 앱에서 Node 사용 가능\n  - 터미널에서는 여전히 nvm으로 프로젝트별 버전 관리 가능\n  - `nvm alias default`로 GUI 앱의 기본 버전 변경 가능\n\n이 방법은 VS Code 익스텐션뿐만 아니라 Electron 앱 등 Node를 필요로 하는 모든 macOS GUI 앱에 적용할 수 있다.\n"},"meta":{"title":"macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기","description":"VS Code 익스텐션이 Node를 찾지 못할 때","date":"2025/01/16","tags":["macOS","nvm","Node.js","PATH","VS Code"],"categories":["dev","troubleshooting"],"thumbnail":"assets/images/posts/thumbnails/macos-gui-app-node-path-fix.png"},"content":"<h1 id=\"macos-gui-앱에서-nvm-node를-인식하지-못하는-문제-해결하기\" class=\"heading\">macOS GUI 앱에서 nvm Node를 인식하지 못하는 문제 해결하기</h1>\n<p>프로젝트에서 i18n Ally 익스텐션을 사용하고 있었는데, 분명히 정상 작동하던 것이 어느 날 갑자기 고장났다. 로그를 확인해보니 이런 에러가 나오고 있었다</p>\n<pre><code class=\"code-highlight\"><span class=\"code-line\">🐛 Failed to load Error: Command failed: node \"/Users/bran/.windsurf/extensions/lokalise.i18n-ally-2.13.1-universal/node_modules/ts-node/dist/bin.js\" ...\n</span><span class=\"code-line\">/bin/sh: node: command not found\n</span></code></pre>\n<p>터미널에서 <code>node --version</code>을 실행하면 정상적으로 <code>v22.18.0</code>이 출력되는데, VS Code나 Windsurf 같은 GUI 앱의 익스텐션에서는 Node를 찾을 수 없다는 것이다.</p>\n<h2 id=\"문제의-원인\" class=\"heading\">문제의 원인</h2>\n<h3 id=\"nvm의-동작-방식\">nvm의 동작 방식</h3>\n<p>nvm은 <strong>동적으로</strong> PATH를 조작한다. 셸이 시작될 때 <code>.zshrc</code>나 <code>.bash_profile</code>에 있는 <code>nvm.sh</code> 스크립트가 실행되면서</p>\n<ol>\n<li>현재 활성화된 Node 버전의 경로를 찾는다</li>\n<li>해당 경로를 PATH <strong>맨 앞에</strong> 추가한다</li>\n<li><code>nvm use &#x3C;버전></code> 명령을 실행하면 이전 경로를 제거하고 새 경로를 추가한다</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\"><span class=\"token comment\"># 터미널에서 확인해보면 nvm Node 경로가 PATH 맨 앞에 있다</span>\n</span><span class=\"code-line\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n</span><span class=\"code-line\">/Users/bran/.nvm/versions/node/v22.18.0/bin:/opt/homebrew/bin:<span class=\"token punctuation\">..</span>.\n</span></code></pre>\n<h3 id=\"gui-앱은-셸-설정을-읽지-않는다\">GUI 앱은 셸 설정을 읽지 않는다</h3>\n<p>문제는 <strong>macOS GUI 앱은 셸 설정 파일을 읽지 않는다</strong>는 것이다.</p>\n<ul>\n<li>Finder나 Dock에서 앱을 실행하면 <code>launchd</code>라는 시스템 데몬이 앱을 실행한다</li>\n<li><code>launchd</code>는 <code>/etc/paths</code>와 <code>/etc/paths.d/</code> 디렉토리의 설정만 읽는다</li>\n<li>사용자의 <code>.zshrc</code>나 <code>.bash_profile</code>은 완전히 무시된다</li>\n<li>따라서 nvm의 동적 PATH 설정도 적용되지 않는다</li>\n</ul>\n<p>터미널을 열면 셸이 시작되면서 <code>.zshrc</code>를 읽어 nvm이 로드되지만, GUI 앱은 그런 과정 없이 바로 실행되기 때문에 nvm의 Node를 찾을 수 없는 것이다.</p>\n<h2 id=\"해결-방법\" class=\"heading\">해결 방법</h2>\n<p><code>/etc/paths.d/</code> 디렉토리에 nvm Node 경로를 추가하면 된다. 이렇게 하면 모든 GUI 앱이 시스템 시작 시 해당 경로를 PATH에 포함한다.\n기왕 하는김에, nvm만큼 동적으로 대응할수는 없더라도 특정 버전에 의존하지는 않도록 default 버전을 바라보는 방식으로 추가했다.</p>\n<h3 id=\"1-현재-nvm-버전-확인\">1. 현재 nvm 버전 확인</h3>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">nvm current\n</span><span class=\"code-line\"><span class=\"token comment\"># v22.18.0</span>\n</span></code></pre>\n<h3 id=\"2-nvm-default-alias-설정\">2. nvm default alias 설정</h3>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\">nvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token number\">22.18</span>.0\n</span></code></pre>\n<p>nvm은 <code>default</code>라는 이름으로 심볼릭 링크를 생성한다</p>\n<pre><code class=\"code-highlight\"><span class=\"code-line\">~/.nvm/versions/node/default -> ~/.nvm/versions/node/v22.18.0\n</span></code></pre>\n<h3 id=\"3-etcpathsdnvm-파일-생성\">3. /etc/paths.d/nvm 파일 생성</h3>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.nvm/versions/node/default/bin\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/paths.d/nvm\n</span></code></pre>\n<p>위 명령어로 <code>/etc/paths.d/nvm</code> 파일이 생성되고, 다음 내용이 저장된다</p>\n<pre><code class=\"code-highlight\"><span class=\"code-line\">/Users/bran/.nvm/versions/node/default/bin\n</span></code></pre>\n<p>여기까지 했으면 macOS 재부팅 시 적용이 될 것이다. 재부팅 하지 않고 즉시 변경사항을 반영하고 싶다면 다음 4번과 5번 단계를 추가로 거친다.</p>\n<h3 id=\"4-dock-재시작\">4. Dock 재시작</h3>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\"><span class=\"token function\">killall</span> Dock\n</span></code></pre>\n<h3 id=\"5-gui-앱-재시작\">5. GUI 앱 재시작</h3>\n<p>VS Code, Windsurf 등 Node를 사용하는 앱을 완전히 종료하고 다시 실행한다.</p>\n<h2 id=\"작동-원리\" class=\"heading\">작동 원리</h2>\n<h3 id=\"gui-앱에서\">GUI 앱에서</h3>\n<p>이제 GUI 앱들은 다음과 같은 PATH를 가지게 된다</p>\n<pre><code class=\"code-highlight\"><span class=\"code-line\">/usr/local/bin\n</span><span class=\"code-line\">/System/Cryptexes/App/usr/bin\n</span><span class=\"code-line\">/usr/bin\n</span><span class=\"code-line\">/bin\n</span><span class=\"code-line\">/usr/sbin\n</span><span class=\"code-line\">/sbin\n</span><span class=\"code-line\">/Users/bran/.nvm/versions/node/default/bin  # 새로 추가됨\n</span></code></pre>\n<p><code>/etc/paths.d/</code> 디렉토리의 모든 파일 내용이 자동으로 PATH에 추가되는 것이다.</p>\n<h3 id=\"터미널에서\">터미널에서</h3>\n<p>터미널에서는 여전히 nvm이 정상 작동한다</p>\n<ol>\n<li>셸이 시작되면서 <code>.zshrc</code>의 <code>nvm.sh</code>가 실행된다</li>\n<li>nvm이 동적으로 PATH 맨 앞에 Node 경로를 추가한다</li>\n<li><code>nvm use</code> 명령으로 프로젝트별로 다른 Node 버전을 자유롭게 사용할 수 있다</li>\n</ol>\n<p>nvm의 PATH가 <code>/etc/paths.d/nvm</code>보다 앞에 있기 때문에 터미널에서는 nvm이 우선순위를 가진다.</p>\n<h3 id=\"default-심볼릭-링크의-장점\">default 심볼릭 링크의 장점</h3>\n<p><code>default</code> 심볼릭 링크를 사용했기 때문에</p>\n<pre class=\"language-bash\"><code class=\"language-bash code-highlight\"><span class=\"code-line\"><span class=\"token comment\"># GUI 앱의 기본 Node 버전을 변경하고 싶다면</span>\n</span><span class=\"code-line\">nvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token number\">18.0</span>.0\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\"># Dock 재시작</span>\n</span><span class=\"code-line\"><span class=\"token function\">killall</span> Dock\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\"># 이제 GUI 앱들은 v18.0.0을 사용한다</span>\n</span></code></pre>\n<p>절대 경로 대신 <code>default</code> 심볼릭 링크를 사용하면 <code>/etc/paths.d/nvm</code> 파일을 수정할 필요 없이 nvm alias만 바꾸면 된다.</p>\n<h2 id=\"결과\" class=\"heading\">결과</h2>\n<p>이제 GUI로 실행하는 앱들도 node를 찾을 수 있다.\n그리고 내 IDE의 i18n Ally 익스텐션도 정상적으로 작동한다.</p>\n<pre><code class=\"code-highlight\"><span class=\"code-line\">✅ Loading finished\n</span><span class=\"code-line\">📂 Loading locales under /Users/bran/repositories/front-taap-stpm/src/constants/locales\n</span><span class=\"code-line\">    📑 Loading (en) en.ts\n</span><span class=\"code-line\">    📑 Loading (ko) ko.ts\n</span></code></pre>\n<h2 id=\"요약\" class=\"heading\">요약</h2>\n<ul>\n<li><strong>문제</strong>: macOS GUI 앱은 셸 설정 파일을 읽지 않아 nvm Node를 찾지 못함</li>\n<li><strong>원인</strong>: GUI 앱은 <code>launchd</code>가 실행하며, <code>/etc/paths</code>와 <code>/etc/paths.d/</code>만 참조함</li>\n<li><strong>해결</strong>: <code>/etc/paths.d/nvm</code>에 nvm default 경로를 추가</li>\n<li><strong>효과</strong>:\n<ul>\n<li>GUI 앱에서 Node 사용 가능</li>\n<li>터미널에서는 여전히 nvm으로 프로젝트별 버전 관리 가능</li>\n<li><code>nvm alias default</code>로 GUI 앱의 기본 버전 변경 가능</li>\n</ul>\n</li>\n</ul>\n<p>이 방법은 VS Code 익스텐션뿐만 아니라 Electron 앱 등 Node를 필요로 하는 모든 macOS GUI 앱에 적용할 수 있다.</p>"}]
