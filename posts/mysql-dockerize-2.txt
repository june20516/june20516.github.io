1:HL["/_next/static/css/5624dea08047460b.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":[["slug","mysql-dockerize-2","d"],{"children":["__PAGE__?{\"slug\":\"mysql-dockerize-2\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5624dea08047460b.css","precedence":"next"}]],["$L3",null]]]]
4:HL["/_next/static/css/ed65a566c9c7159d.css",{"as":"style"}]
5:I{"id":"6886","chunks":["771:static/chunks/771-4a62562d40204820.js","846:static/chunks/846-5374114718c3ba3f.js","218:static/chunks/218-24e2ed3a86df3181.js","185:static/chunks/app/layout-e8c4c155fa8e4ac6.js"],"name":"","async":false}
6:I{"id":"4463","chunks":["272:static/chunks/webpack-10e31400734e1857.js","667:static/chunks/2443530c-0538301a504b83cf.js","488:static/chunks/488-c0b34e96c35b33f7.js"],"name":"","async":false}
7:I{"id":"1010","chunks":["272:static/chunks/webpack-10e31400734e1857.js","667:static/chunks/2443530c-0538301a504b83cf.js","488:static/chunks/488-c0b34e96c35b33f7.js"],"name":"","async":false}
2:[["$","$L5",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["slug","mysql-dockerize-2","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"slug\":\"mysql-dockerize-2\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ed65a566c9c7159d.css","precedence":"next"}]]}],null],"segment":["slug","mysql-dockerize-2","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],"params":{}}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"mysql dockerize(2) - mysql container에 볼륨 설정하기 - Bran's codeverse"}],["$","meta",null,{"name":"description","content":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다."}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,[null,["$","meta",null,{"property":"og:title","content":"mysql dockerize(2) - mysql container에 볼륨 설정하기 - Bran's codeverse"}],["$","meta",null,{"property":"og:description","content":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다."}],null,["$","meta",null,{"property":"og:site_name","content":"Bran's codeverse"}],null,null,null,[[["$","meta",null,{"property":"og:image","content":"http://localhost:3000/assets/images/posts/thumbnails/mysql-dockerize.jpeg"}]]],null,null,null,null,null,null,[["$","meta",null,{"property":"og:type","content":"article"}],null,null,null,null,null,null]],[["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:site","content":"@codeverse"}],null,null,null,["$","meta",null,{"name":"twitter:title","content":"mysql dockerize(2) - mysql container에 볼륨 설정하기 - Bran's codeverse"}],["$","meta",null,{"name":"twitter:description","content":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다."}],[[["$","meta",null,{"name":"twitter:image","content":"http://localhost:3000/assets/images/posts/thumbnails/mysql-dockerize.jpeg"}]]],null,null],null,[null,[["$","link",null,{"rel":"icon","href":"/icon.svg?43070ac23468c58b","type":"image/svg+xml","sizes":"32x32"}]],[],null]]
9:I{"id":"4970","chunks":["771:static/chunks/771-4a62562d40204820.js","333:static/chunks/app/posts/[slug]/page-badc3e4118604748.js"],"name":"","async":false}
8:["$","$L9",null,{"post":{"slug":"mysql-dockerize-2","meta":{"title":"mysql dockerize(2) - mysql container에 볼륨 설정하기","date":"2021/11/13","description":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다.","thumbnail":"assets/images/posts/thumbnails/mysql-dockerize.jpeg","tags":["container","docker","mysql","volume","도커","볼륨"]},"content":"\n## 지속적으로 사용할 수 있는 DB 만들기\n\n도커 컨테이너는 프로세스가 종료되면 내부에서 일어난 변경사항들이 모두 사라진다. 재부팅을 하거나 컨테이너가 삭제되면, 그동안 생성한 데이터들이 모두 초기화된다. 이를 방지하기 위해 도커는 데이터를 유지할 수 있는 \"볼륨\" 기능을 제공한다.\nMySQL 이미지는 이 기능을 내부적으로 사용하고 있어서, 컨테이너를 생성할 때 자동으로 볼륨을 만든다. 하지만 이렇게 만들어진 볼륨은 컨테이너를 삭제하면 함께 사라지기 때문에, 데이터를 별도로 관리하고자 한다.\n\n### 볼륨\n\n도커 공식 문서에서는 이렇게 설명하고 있다.\n\n> Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.\n> While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker.\n\n볼륨은 데이터 보존을 위한 기본 메커니즘이다. 운영 체제의 디렉토리 구조에 의존하는 `Bind mount`와 달리, 볼륨은 도커가 자체적으로 관리하기 때문에 실행 중인 운영 체제에 영향을 받지 않는다는 장점이 있다.\n\n### 볼륨 확인\n\n우선 MySQL 컨테이너에서 기본적으로 생성되는 볼륨을 확인해보자.\n\n```shell\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql\ne94b0ab7eed5b1d147147ffe5b170d1520ee680f7b3ab7511e4e0fb4fb9a1925\n\n$  docker volume list\nDRIVER    VOLUME NAME\nlocal     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n```\n\n`docker volume list` 명령어로 볼륨 목록을 확인하면, 자동으로 생성된 임의의 해시값이 볼륨 이름으로 나타난다. 이제 컨테이너를 삭제하고 다시 실행해보자.\n\n```shell\n$ docker stop mysql\nmysql\n\n$ docker rm mysql\nmysql\n\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql\n456be35825bc8b1b7d2a4494c8b160ab578730f31a625a775abea271b036eae7\n\n$ docker volume list\nDRIVER    VOLUME NAME\nlocal     6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\nlocal     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n```\n\n이전 볼륨이 삭제되지 않고 새로운 볼륨이 생성된 것을 확인할 수 있다. 컨테이너 안에서 데이터를 생성해본 후 다시 컨테이너를 삭제하고 재실행하면, 데이터가 없어져 있음을 확인할 수 있다.\n\n### 볼륨에 이름 부여하기\n\n컨테이너를 실행할 때 `-v {볼륨 이름||로컬 경로}:{컨테이너 안 경로}`또는 `--volume={볼륨 이름||로컬 경로}:{컨테이너 안 경로}` 옵션을 부여하여 볼륨을 직접 설정할 수 있다. mysql 이미지 안에서 볼륨은 `/var/lib/mysql`에 마운트되므로, 해당 경로와 함께 원하는 볼륨 이름을 지정하면 된다. 아래에서는 `mysql-volume`이라는 이름으로 설정했다.\n\n```shell\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -v mysql-volume:/var/lib/mysql -d mysql\n```\n\n이제 볼륨 목록을 다시 확인해보자.\n\n```shell\n$ docker volume list\nDRIVER    VOLUME NAME\nlocal     6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\nlocal     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\nlocal     mysql-volume\n```\n\nmysql-volume이라는 이름의 볼륨이 생성된 것을 확인할 수 있다. 이제 컨테이너를 삭제하더라도, 볼륨을 제거하지 않는 한 동일한 볼륨을 계속 사용할 수 있다.\n\n### 볼륨 삭제하기\n\n불필요한 볼륨은 삭제할 수 있다. 삭제하는 방법은 다음과 같다.\n\n1. 컨테이너를 삭제할 때 볼륨도 함께 삭제하는 방법\n\n```shell\n$ docker rm -v mysql\n```\n\n2. 볼륨 리스트에서 특정 볼륨을 직접 삭제하는 방법\n\n```shell\n$ docker volume rm 6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\n```\n\n3. 로컬에 생성되어 있지만, 어떤 컨테이너에도 연결되지 않은 \"dangling\" 상태의 모든 볼륨을 삭제하는 방법\n\n```shell\n$ docker volume prune\n```\n"},"meta":{"title":"mysql dockerize(2) - mysql container에 볼륨 설정하기","date":"2021/11/13","description":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다.","thumbnail":"assets/images/posts/thumbnails/mysql-dockerize.jpeg","tags":["container","docker","mysql","volume","도커","볼륨"]},"content":"<h2 id=\"지속적으로-사용할-수-있는-db-만들기\" class=\"heading\">지속적으로 사용할 수 있는 DB 만들기</h2>\n<p>도커 컨테이너는 프로세스가 종료되면 내부에서 일어난 변경사항들이 모두 사라진다. 재부팅을 하거나 컨테이너가 삭제되면, 그동안 생성한 데이터들이 모두 초기화된다. 이를 방지하기 위해 도커는 데이터를 유지할 수 있는 \"볼륨\" 기능을 제공한다.\nMySQL 이미지는 이 기능을 내부적으로 사용하고 있어서, 컨테이너를 생성할 때 자동으로 볼륨을 만든다. 하지만 이렇게 만들어진 볼륨은 컨테이너를 삭제하면 함께 사라지기 때문에, 데이터를 별도로 관리하고자 한다.</p>\n<h3 id=\"볼륨\">볼륨</h3>\n<p>도커 공식 문서에서는 이렇게 설명하고 있다.</p>\n<blockquote>\n<p>Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.\nWhile bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker.</p>\n</blockquote>\n<p>볼륨은 데이터 보존을 위한 기본 메커니즘이다. 운영 체제의 디렉토리 구조에 의존하는 <code>Bind mount</code>와 달리, 볼륨은 도커가 자체적으로 관리하기 때문에 실행 중인 운영 체제에 영향을 받지 않는다는 장점이 있다.</p>\n<h3 id=\"볼륨-확인\">볼륨 확인</h3>\n<p>우선 MySQL 컨테이너에서 기본적으로 생성되는 볼륨을 확인해보자.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span> <span class=\"token parameter variable\">-d</span> mysql\n</span><span class=\"code-line\">e94b0ab7eed5b1d147147ffe5b170d1520ee680f7b3ab7511e4e0fb4fb9a1925\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">$  <span class=\"token function\">docker</span> volume list\n</span><span class=\"code-line\">DRIVER    VOLUME NAME\n</span><span class=\"code-line\"><span class=\"token builtin class-name\">local</span>     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n</span></code></pre>\n<p><code>docker volume list</code> 명령어로 볼륨 목록을 확인하면, 자동으로 생성된 임의의 해시값이 볼륨 이름으로 나타난다. 이제 컨테이너를 삭제하고 다시 실행해보자.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> stop mysql\n</span><span class=\"code-line\">mysql\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> <span class=\"token function\">rm</span> mysql\n</span><span class=\"code-line\">mysql\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span> <span class=\"token parameter variable\">-d</span> mysql\n</span><span class=\"code-line\">456be35825bc8b1b7d2a4494c8b160ab578730f31a625a775abea271b036eae7\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> volume list\n</span><span class=\"code-line\">DRIVER    VOLUME NAME\n</span><span class=\"code-line\"><span class=\"token builtin class-name\">local</span>     6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\n</span><span class=\"code-line\"><span class=\"token builtin class-name\">local</span>     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n</span></code></pre>\n<p>이전 볼륨이 삭제되지 않고 새로운 볼륨이 생성된 것을 확인할 수 있다. 컨테이너 안에서 데이터를 생성해본 후 다시 컨테이너를 삭제하고 재실행하면, 데이터가 없어져 있음을 확인할 수 있다.</p>\n<h3 id=\"볼륨에-이름-부여하기\">볼륨에 이름 부여하기</h3>\n<p>컨테이너를 실행할 때 <code>-v {볼륨 이름||로컬 경로}:{컨테이너 안 경로}</code>또는 <code>--volume={볼륨 이름||로컬 경로}:{컨테이너 안 경로}</code> 옵션을 부여하여 볼륨을 직접 설정할 수 있다. mysql 이미지 안에서 볼륨은 <code>/var/lib/mysql</code>에 마운트되므로, 해당 경로와 함께 원하는 볼륨 이름을 지정하면 된다. 아래에서는 <code>mysql-volume</code>이라는 이름으로 설정했다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span> <span class=\"token parameter variable\">-v</span> mysql-volume:/var/lib/mysql <span class=\"token parameter variable\">-d</span> mysql\n</span></code></pre>\n<p>이제 볼륨 목록을 다시 확인해보자.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> volume list\n</span><span class=\"code-line\">DRIVER    VOLUME NAME\n</span><span class=\"code-line\"><span class=\"token builtin class-name\">local</span>     6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\n</span><span class=\"code-line\"><span class=\"token builtin class-name\">local</span>     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n</span><span class=\"code-line\"><span class=\"token builtin class-name\">local</span>     mysql-volume\n</span></code></pre>\n<p>mysql-volume이라는 이름의 볼륨이 생성된 것을 확인할 수 있다. 이제 컨테이너를 삭제하더라도, 볼륨을 제거하지 않는 한 동일한 볼륨을 계속 사용할 수 있다.</p>\n<h3 id=\"볼륨-삭제하기\">볼륨 삭제하기</h3>\n<p>불필요한 볼륨은 삭제할 수 있다. 삭제하는 방법은 다음과 같다.</p>\n<ol>\n<li>컨테이너를 삭제할 때 볼륨도 함께 삭제하는 방법</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-v</span> mysql\n</span></code></pre>\n<ol start=\"2\">\n<li>볼륨 리스트에서 특정 볼륨을 직접 삭제하는 방법</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> volume <span class=\"token function\">rm</span> 6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\n</span></code></pre>\n<ol start=\"3\">\n<li>로컬에 생성되어 있지만, 어떤 컨테이너에도 연결되지 않은 \"dangling\" 상태의 모든 볼륨을 삭제하는 방법</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> volume prune\n</span></code></pre>"}]
