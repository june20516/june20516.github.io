1:HL["/_next/static/css/5624dea08047460b.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":[["slug","mysql-dockerize","d"],{"children":["__PAGE__?{\"slug\":\"mysql-dockerize\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5624dea08047460b.css","precedence":"next"}]],["$L3",null]]]]
4:HL["/_next/static/css/cb783fed5b90787f.css",{"as":"style"}]
5:I{"id":"6886","chunks":["771:static/chunks/771-4a62562d40204820.js","846:static/chunks/846-5374114718c3ba3f.js","363:static/chunks/363-097e6bb98da01208.js","185:static/chunks/app/layout-c1a912ae26ccf199.js"],"name":"","async":false}
6:I{"id":"4463","chunks":["272:static/chunks/webpack-e626dd0d67257d17.js","667:static/chunks/2443530c-0538301a504b83cf.js","488:static/chunks/488-c0b34e96c35b33f7.js"],"name":"","async":false}
7:I{"id":"1010","chunks":["272:static/chunks/webpack-e626dd0d67257d17.js","667:static/chunks/2443530c-0538301a504b83cf.js","488:static/chunks/488-c0b34e96c35b33f7.js"],"name":"","async":false}
2:[["$","$L5",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["slug","mysql-dockerize","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"slug\":\"mysql-dockerize\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cb783fed5b90787f.css","precedence":"next"}]]}],null],"segment":["slug","mysql-dockerize","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],"params":{}}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"mysql dockerize(1) - 도커로 mysql container 띄우기 - Bran's codeverse"}],["$","meta",null,{"name":"description","content":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다."}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,[null,["$","meta",null,{"property":"og:title","content":"mysql dockerize(1) - 도커로 mysql container 띄우기 - Bran's codeverse"}],["$","meta",null,{"property":"og:description","content":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다."}],null,["$","meta",null,{"property":"og:site_name","content":"Bran's codeverse"}],null,null,null,[[["$","meta",null,{"property":"og:image","content":"http://localhost:3000/assets/images/posts/mysql-dockerize.jpeg"}]]],null,null,null,null,null,null,[["$","meta",null,{"property":"og:type","content":"article"}],null,null,null,null,null,null]],[["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:site","content":"@codeverse"}],null,null,null,["$","meta",null,{"name":"twitter:title","content":"mysql dockerize(1) - 도커로 mysql container 띄우기 - Bran's codeverse"}],["$","meta",null,{"name":"twitter:description","content":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다."}],[[["$","meta",null,{"name":"twitter:image","content":"http://localhost:3000/assets/images/posts/mysql-dockerize.jpeg"}]]],null,null],null,[null,[["$","link",null,{"rel":"icon","href":"/icon.svg?43070ac23468c58b","type":"image/svg+xml","sizes":"32x32"}]],[],null]]
9:I{"id":"4970","chunks":["771:static/chunks/771-4a62562d40204820.js","755:static/chunks/app/drafts/[slug]/page-53d5077f0cc841db.js"],"name":"","async":false}
8:["$","$L9",null,{"post":{"slug":"mysql-dockerize","meta":{"title":"mysql dockerize(1) - 도커로 mysql container 띄우기","date":"2021/11/07","description":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다.","tags":["MYSQL_ALLOW_EMPTY_PASSWORD","MYSQL_RANDOM_ROOT_PASSWORD","MYSQL_ROOT_PASSWORD","container","docker","mysql"],"thumbnail":"assets/images/posts/mysql-dockerize.jpeg"},"content":"\n최근 작업 중 DB 스키마 변경이 로컬 개발 환경에 영향을 미치는 일이 자주 발생했다. 이를 방지하기 위해 로컬에서 실행 중인 MySQL을 도커로 격리하여 실행하기로 했다.\n\n## 시작점\n\n현재 사용 중인 DB는 MySQL이며, Ruby on Rails(RoR) 프로젝트를 진행 중이다. 로컬 환경에 MySQL 서버가 설치되어 있고, Docker는 이미 설치되어 있다.\n\n## 도커로 mysql container 띄우기\n\n### mysql 이미지 가져오기\n\n먼저 MySQL 이미지를 가져온다.\n\n```shell\n$ docker pull mysql\n\nUsing default tag: latest\nlatest: Pulling from library/mysql\n...\n...\nDigest: ...\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n```\n\nLTS 버전의 MySQL 이미지가 로드된다.\n\n### mysql 이미지를 컨테이너로 실행하기\n\n로드한 이미지를 컨테이너로 실행해본다.\n\n```shell\n$ docker run mysql\n\n2021-11-07 07:55:25+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.27-1debian10 started.\n2021-11-07 07:55:25+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n2021-11-07 07:55:25+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.27-1debian10 started.\n2021-11-07 07:55:25+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified\n    You need to specify one of the following:\n    - MYSQL_ROOT_PASSWORD\n    - MYSQL_ALLOW_EMPTY_PASSWORD\n    - MYSQL_RANDOM_ROOT_PASSWORD\n```\n\n에러가 발생한다. MySQL 컨테이너는 루트 사용자의 비밀번호 설정 방법을 명시해야 한다. 아래 세 가지 옵션 중 하나를 선택해 컨테이너의 환경 변수로 전달한다.\n\n```shell\n$ docker run mysql -e MYSQL_ROOT_PASSWORD=1234\n# 또는\n$ docker run mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=abcd\n# 또는\n$ docker run mysql -e MYSQL_RANDOM_ROOT_PASSWORD=abcd\n```\n\n루트 비밀번호를 지정해주었다. 비밀번호를 설정하지 않는 MYSQL_ALLOW_EMPTY_PASSWORD나 MYSQL_RANDOM_ROOT_PASSWORD 옵션도 환경 변수에 값을 지정해줘야 동작한다. 실제로 해당 값이 영향을 미치지는 않는다.\n\n랜덤 비밀번호 옵션을 사용하면 실행 로그에 비밀번호가 표시된다.\n\n```shell\n2021-11-07 07:55:40+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.27-1debian10 started.\n2021-11-07 07:55:40+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n...\n...\n2021-11-07 07:55:48+00:00 [Note] [Entrypoint]: GENERATED ROOT PASSWORD: ojai1toovee3jahC4ooh7on8ahjoo0ji\n...\n2021-11-07 07:55:50+00:00 [Note] [Entrypoint]: MySQL init process done. Ready for start up.\n...\n2021-11-07T07:55:51.690474Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\n2021-11-07T07:55:51.690582Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.0.27'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\n```\n\n컨테이너가 정상적으로 실행되었는지 확인한다.\n\n```shell\n$ docker ps\n\nCONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS          PORTS                    NAMES\nddb780457980   mysql      \"docker-entrypoint.s…\"   4 minutes ago   Up 4 minutes    3306/tcp, 33060/tcp      musing_dewdney\n```\n\n### 컨테이너 실행 결과 확인하기\n\n터미널을 하나 더 열어 방금 띄운 MySQL 컨테이너에 접속할 수 있다. 지정한 비밀번호로 MySQL 클라이언트에 접속해본다.\n\n```shell\n$ docker exec -it musing_dewdney bash\n\nroot@ddb780457980:/# mysql -uroot -p1234\n\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 8.0.27 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```\n\n### 옵션 추가\n\nMySQL 서버는 항상 실행되어 있어야 하므로 데몬 모드로 실행하는 것이 일반적이다. 또한, 컨테이너에 접근하기 쉽게 이름을 지정할 수 있다.\n이미 실행 중인 컨테이너를 정지하고 삭제한 후, 몇 가지 옵션을 추가하여 새로 띄운다.\n\n```shell\n$ docker kill musing_dewdney\n\n$ docker rm musing_dewdney\n\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql\n```\n\n성공적으로 실행되었다면, 아까와 같이 컨테이너 내부에 접속하여 확인할 수 있다.\n\n```\n$ docker exec -it mysql bash\n```\n"},"meta":{"title":"mysql dockerize(1) - 도커로 mysql container 띄우기","date":"2021/11/07","description":"로컬 환경을 안전하게 보호하기 위해 MySQL을 도커로 격리하여 실행하는 과정을 기록한다.","tags":["MYSQL_ALLOW_EMPTY_PASSWORD","MYSQL_RANDOM_ROOT_PASSWORD","MYSQL_ROOT_PASSWORD","container","docker","mysql"],"thumbnail":"assets/images/posts/mysql-dockerize.jpeg"},"content":"<p>최근 작업 중 DB 스키마 변경이 로컬 개발 환경에 영향을 미치는 일이 자주 발생했다. 이를 방지하기 위해 로컬에서 실행 중인 MySQL을 도커로 격리하여 실행하기로 했다.</p>\n<h2 id=\"시작점\" class=\"heading\">시작점</h2>\n<p>현재 사용 중인 DB는 MySQL이며, Ruby on Rails(RoR) 프로젝트를 진행 중이다. 로컬 환경에 MySQL 서버가 설치되어 있고, Docker는 이미 설치되어 있다.</p>\n<h2 id=\"도커로-mysql-container-띄우기\" class=\"heading\">도커로 mysql container 띄우기</h2>\n<h3 id=\"mysql-이미지-가져오기\">mysql 이미지 가져오기</h3>\n<p>먼저 MySQL 이미지를 가져온다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> pull mysql\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Using default tag: latest\n</span><span class=\"code-line\">latest: Pulling from library/mysql\n</span><span class=\"code-line\"><span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\"><span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\">Digest: <span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\">Status: Downloaded newer image <span class=\"token keyword\">for</span> mysql:latest\n</span><span class=\"code-line\">docker.io/library/mysql:latest\n</span></code></pre>\n<p>LTS 버전의 MySQL 이미지가 로드된다.</p>\n<h3 id=\"mysql-이미지를-컨테이너로-실행하기\">mysql 이미지를 컨테이너로 실행하기</h3>\n<p>로드한 이미지를 컨테이너로 실행해본다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> run mysql\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:25+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: Entrypoint script <span class=\"token keyword\">for</span> MySQL Server <span class=\"token number\">8.0</span>.27-1debian10 started.\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:25+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: Switching to dedicated user <span class=\"token string\">'mysql'</span>\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:25+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: Entrypoint script <span class=\"token keyword\">for</span> MySQL Server <span class=\"token number\">8.0</span>.27-1debian10 started.\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:25+00:00 <span class=\"token punctuation\">[</span>ERROR<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: Database is uninitialized and password option is not specified\n</span><span class=\"code-line\">    You need to specify one of the following:\n</span><span class=\"code-line\">    - MYSQL_ROOT_PASSWORD\n</span><span class=\"code-line\">    - MYSQL_ALLOW_EMPTY_PASSWORD\n</span><span class=\"code-line\">    - MYSQL_RANDOM_ROOT_PASSWORD\n</span></code></pre>\n<p>에러가 발생한다. MySQL 컨테이너는 루트 사용자의 비밀번호 설정 방법을 명시해야 한다. 아래 세 가지 옵션 중 하나를 선택해 컨테이너의 환경 변수로 전달한다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> run mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># 또는</span>\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> run mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"token operator\">=</span>abcd\n</span><span class=\"code-line\"><span class=\"token comment\"># 또는</span>\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> run mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_RANDOM_ROOT_PASSWORD</span><span class=\"token operator\">=</span>abcd\n</span></code></pre>\n<p>루트 비밀번호를 지정해주었다. 비밀번호를 설정하지 않는 MYSQL_ALLOW_EMPTY_PASSWORD나 MYSQL_RANDOM_ROOT_PASSWORD 옵션도 환경 변수에 값을 지정해줘야 동작한다. 실제로 해당 값이 영향을 미치지는 않는다.</p>\n<p>랜덤 비밀번호 옵션을 사용하면 실행 로그에 비밀번호가 표시된다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:40+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: Entrypoint script <span class=\"token keyword\">for</span> MySQL Server <span class=\"token number\">8.0</span>.27-1debian10 started.\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:40+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: Switching to dedicated user <span class=\"token string\">'mysql'</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\"><span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:48+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: GENERATED ROOT PASSWORD: ojai1toovee3jahC4ooh7on8ahjoo0ji\n</span><span class=\"code-line\"><span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07 07:55:50+00:00 <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Entrypoint<span class=\"token punctuation\">]</span>: MySQL init process done. Ready <span class=\"token keyword\">for</span> start up.\n</span><span class=\"code-line\"><span class=\"token punctuation\">..</span>.\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07T07:55:51.690474Z <span class=\"token number\">0</span> <span class=\"token punctuation\">[</span>System<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>MY-011323<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span> X Plugin ready <span class=\"token keyword\">for</span> connections. Bind-address: <span class=\"token string\">'::'</span> port: <span class=\"token number\">33060</span>, socket: /var/run/mysqld/mysqlx.sock\n</span><span class=\"code-line\"><span class=\"token number\">2021</span>-11-07T07:55:51.690582Z <span class=\"token number\">0</span> <span class=\"token punctuation\">[</span>System<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>MY-010931<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span> /usr/sbin/mysqld: ready <span class=\"token keyword\">for</span> connections. Version: <span class=\"token string\">'8.0.27'</span>  socket: <span class=\"token string\">'/var/run/mysqld/mysqld.sock'</span>  port: <span class=\"token number\">3306</span>  MySQL Community Server - GPL.\n</span></code></pre>\n<p>컨테이너가 정상적으로 실행되었는지 확인한다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS          PORTS                    NAMES\n</span><span class=\"code-line\">ddb780457980   mysql      <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">4</span> minutes ago   Up <span class=\"token number\">4</span> minutes    <span class=\"token number\">3306</span>/tcp, <span class=\"token number\">33060</span>/tcp      musing_dewdney\n</span></code></pre>\n<h3 id=\"컨테이너-실행-결과-확인하기\">컨테이너 실행 결과 확인하기</h3>\n<p>터미널을 하나 더 열어 방금 띄운 MySQL 컨테이너에 접속할 수 있다. 지정한 비밀번호로 MySQL 클라이언트에 접속해본다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> musing_dewdney <span class=\"token function\">bash</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">root@ddb780457980:/<span class=\"token comment\"># mysql -uroot -p1234</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">mysql: <span class=\"token punctuation\">[</span>Warning<span class=\"token punctuation\">]</span> Using a password on the <span class=\"token builtin class-name\">command</span> line interface can be insecure.\n</span><span class=\"code-line\">Welcome to the MySQL monitor.  Commands end with <span class=\"token punctuation\">;</span> or <span class=\"token punctuation\">\\</span>g.\n</span><span class=\"code-line\">Your MySQL connection <span class=\"token function\">id</span> is <span class=\"token number\">9</span>\n</span><span class=\"code-line\">Server version: <span class=\"token number\">8.0</span>.27 MySQL Community Server - GPL\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2000</span>, <span class=\"token number\">2021</span>, Oracle and/or its affiliates.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Oracle is a registered trademark of Oracle Corporation and/or its\n</span><span class=\"code-line\">affiliates. Other names may be trademarks of their respective\n</span><span class=\"code-line\">owners.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">Type <span class=\"token string\">'help;'</span> or <span class=\"token string\">'\\h'</span> <span class=\"token keyword\">for</span> help. Type <span class=\"token string\">'\\c'</span> to <span class=\"token function\">clear</span> the current input statement.\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">mysql<span class=\"token operator\">></span>\n</span></code></pre>\n<h3 id=\"옵션-추가\">옵션 추가</h3>\n<p>MySQL 서버는 항상 실행되어 있어야 하므로 데몬 모드로 실행하는 것이 일반적이다. 또한, 컨테이너에 접근하기 쉽게 이름을 지정할 수 있다.\n이미 실행 중인 컨테이너를 정지하고 삭제한 후, 몇 가지 옵션을 추가하여 새로 띄운다.</p>\n<pre class=\"language-shell\"><code class=\"language-shell code-highlight\"><span class=\"code-line\">$ <span class=\"token function\">docker</span> <span class=\"token function\">kill</span> musing_dewdney\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> <span class=\"token function\">rm</span> musing_dewdney\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span> <span class=\"token parameter variable\">-d</span> mysql\n</span></code></pre>\n<p>성공적으로 실행되었다면, 아까와 같이 컨테이너 내부에 접속하여 확인할 수 있다.</p>\n<pre><code class=\"code-highlight\"><span class=\"code-line\">$ docker exec -it mysql bash\n</span></code></pre>"}]
